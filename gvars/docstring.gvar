# docstring = '5aec63f9-9fb4-43e2-93fe-6ca0dcb4b24e'
#
# An implementation of handling docstring trimming from PEP 257 for Draconic
# See https://peps.python.org/pep-0257/#handling-docstring-indentation
#
# Given some multiline strings:
# ```
# [
#     """Multiline strings are nice
#     but they including leading whitespace""",
#     """
#     and some have leading and trailing newlines.
# 
#         Not all leading whitespace is unwanted,
#     so indentation relative to the start of the
#     string is preserved.
#     """
# ]
# ```
# 
# The untrimmed output contains extra whitespace:
# ```
# [
#     'Multiline strings are nice\n        but they including leading whitespace',
#     '\n        and some have leading and trailing newlines.\n\n            Not all leading whitespace is unwanted,\n        so indentation relative to the start of the\n        string is preserved.\n        '
# ]
# ```
# 
# Trimmed strings retain only their relative internal indentation:
# ```
# [
#     'Multiline strings are nice\nbut they including leading whitespace',
#     'and some have leading and trailing newlines.\n\n    Not all leading whitespace is unwanted,\nso indentation relative to the start of the\nstring is preserved.'
# ]
# ```
#
# ===== Functions =====
# trim: Removes leading whitespace from each line of a multiline string.
#
MAX_CONST_LENGTH = 200_000 # See `max_const_length`: https://github.com/avrae/draconic/blob/master/draconic/helpers.py#L20

def trim(docstring):
    """
    Removes leading whitespace from each line of a multiline string so 
    python/draconic indentation does not appear in output strings.

    From PEP 257:
    Strip a uniform amount of indentation from the second and further lines of
    the docstring, equal to the minimum indentation of all non-blank lines after
    the first line. Any indentation in the first line of the docstring (i.e., up
    to the first newline) is insignificant and removed. Relative indentation of
    later lines in the docstring is retained. Blank lines should be removed from
    the beginning and end of the docstring.
    """
    if not docstring:
        return ''
    # Convert tabs to spaces (following the normal Python rules)
    # and split into a list of lines:
    lines = docstring.expandtabs().splitlines()
    # Determine minimum indentation (first line doesn't count):
    indent = MAX_CONST_LENGTH
    for line in lines[1:]:
        stripped = line.lstrip()
        if stripped:
            indent = min(indent, len(line) - len(stripped))
    # Remove indentation (first line is special):
    trimmed = [lines[0].strip()]
    if indent < MAX_CONST_LENGTH:
        for line in lines[1:]:
            trimmed.append(line[indent:].rstrip())
    # Strip off trailing and leading blank lines:
    while trimmed and not trimmed[-1]:
        trimmed.pop()
    while trimmed and not trimmed[0]:
        trimmed.pop(0)
    # Return a single string:
    return '\n'.join(trimmed)
