<drac2>
using(
    embeds = '72fea181-ba03-4cb4-8edf-1f3bc5a49578', # Owned by Lathaon#6649
    fuzzy = '6431690e-ce47-4baa-bb3b-ba751e1a1817', # Owned by Lathaon#6649
    stuff = '6fe42f4d-65ed-4628-af36-22b8c65b451b',
)
USAGE = f'{ctx.prefix}{ctx.alias} list [-group <group name>] [-item <item name>]'

args = &ARGS&
parsed_args = argparse(args)

# Default to searching all groups
matching_groups = stuff.groups()

# If a `-group` argument was given, use that to narrow the list of groups
group_search_str = parsed_args.last('group', type_=str)
if group_search_str:
    matching_groups = fuzzy.get_matches_ignoring_punctuation(
        search=group_search_str,
        iterable=stuff.groups(),
    )
    if len(matching_groups) == 0:
        err(f"\nNo matches for group `{group_search_str}`")

# Add a field for each group
fields = []
for group in matching_groups:
    field = {'title': group}
    item_search_str = parsed_args.last('item', type_=str)
    # If no `-item` argument was given then list all items in the group
    if not item_search_str:
        field['body'] = '\n'.join(stuff.items(group))
    # If an `-item` argument was given then list only matching items
    else:
        matching_items = fuzzy.get_matches_ignoring_punctuation(
            search = item_search_str,
            iterable = stuff.items(group),
        )
        field['body'] = '\n'.join([
            f"{item} | automations: {len(stuff.get_automations(group=group, item=item))}, counters: {len(stuff.get_counters(group=group, item=item))}" for item in matching_items
        ])
    # If this group has any content then add it to the embed, ignore empty groups (or groups with no matching items)
    if field.get('body') and len(field.body) > 0:
        fields.append(field)

return embeds.get_output(
    embed = {
        'title': f"Behold! My stuff.",
        'desc': f"Use `{ctx.prefix}{ctx.alias} equip -group <group> -item <item>` to add automations for an item to {get('name')}",
        'fields': fields,
        'footer': USAGE,
    }
)
</drac2>
